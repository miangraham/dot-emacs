(defun replace-last-sexp ()
  (interactive)
  (let ((value (eval (preceding-sexp))))
    (kill-sexp -1)
    (insert (format "%s" value))))

(defun undosify ()
 (interactive)
 (goto-char (point-min))
 (while (search-forward "\r" nil t) (replace-match "")))

(defun global-text-scale-increase ()
  (interactive)
  (set-face-attribute 'default nil :height (+ (face-attribute 'default :height) 20))
)

(defun global-text-scale-decrease ()
  (interactive)
  (set-face-attribute 'default nil :height (- (face-attribute 'default :height) 20))
  )

(defun global-text-scale-reset ()
  (interactive)
  (set-face-attribute 'default nil :height 150)
  )
(global-text-scale-reset)

(defun goog(term)
  (interactive "sGoogle search: ")
  (browse-url
   (concat "http://www.google.com/search?q="
		   (replace-regexp-in-string " " "+" term)
		   )
   )
)

(defun jsref(term)
  (interactive "sJavascript search: ")
  (browse-url
   (concat "http://www.google.com/search?btnI=I%27m+Feeling+Lucky&q=site%3Adeveloper.mozilla.org/en-US/docs/Web/JavaScript/Reference+"
		   (replace-regexp-in-string " " "+" term)
		   )
   )
  )

(defun copy-whole-buffer()
  (interactive)
  (mark-whole-buffer)
  (copy-region-as-kill (region-beginning) (region-end))
)

(defun delint()
  (interactive)
  (mark-whole-buffer)
  (replace-regexp "}(" "} (")
  (goto-char (point-min))
  (replace-regexp "){" ") {")
  (goto-char (point-min))
  (replace-regexp "function(" "function (")
  (goto-char (point-min))
  (replace-regexp "if(" "if (")
  (goto-char (point-min))
  (replace-regexp "}else" "} else")
  (goto-char (point-min))
  (replace-regexp "else{" "else {")
  (goto-char (point-min))
  (replace-regexp "for(" "for (")
  (goto-char (point-min))
  (replace-regexp "catch(" "catch (")
  (goto-char (point-min))
  (replace-regexp "}catch" "} catch")
)

(provide 'init-misc-defuns)
